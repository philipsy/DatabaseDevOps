USE Test
GO
-- ================================================
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--DROP PROCEDURE [Test_Harn].[spObjectExists]
CREATE PROCEDURE [dbo].[spObjectExists]
--ALTER PROCEDURE [Test_Harn].[spObjectExists]
@i_ObjectType sysname
,@i_SchemaName sysname
,@i_ObjectName sysname = Null --not needed if testing schema's existence
AS
/*
--USAGE:
spObjectExists 'VIEW', 'sys', 'all_objects'
--TESTING--
--bad object type name
spObjectExists 'BAD OBJECT TYPE', 'sys', 'all_objects'
--bad schema name--
spObjectExists 'VIEW', 'BAD SCHEMA NAME', 'all_objects'
--bad object name--
spObjectExists 'VIEW', 'sys', 'BAD OBJECT NAME'
--object in different schema
spObjectExists 'VIEW', 'dbo', 'all_objects'
*/
BEGIN
	SET NOCOUNT ON;
	DECLARE @Msg nvarchar(4000), @crlf char(2) = CHAR(13) + CHAR(10), @dq char(1) = CHAR(34)
	
	--validate inputs--
	IF @i_ObjectType <> 'SCHEMA'
	BEGIN
		--check object type--
		IF NOT EXISTS (SELECT * FROM sys.all_objects o WHERE o.type_desc = @i_ObjectType)
		BEGIN
			SET @Msg = 	'Object Type' + ' ' + @dq + @i_ObjectType + @dq + ' ' + 'not found in sys.all_objects. Run the following query'
			+ @crlf + '"SELECT DISTINCT o.type_desc FROM sys.all_objects o"' + @crlf + 'and choose a new value for the @i_ObjectType parameter.'
			RAISERROR(@Msg, 16, 1, 1)
			RETURN
		END

		--check parent schema--
		IF SCHEMA_ID(@i_SchemaName) Is Null
		BEGIN
			SET @Msg = 'Schema named' + ' ' + @dq + @i_SchemaName + @dq + ' ' + 'does not exist'
			RAISERROR(@Msg, 16, 1, 1)
			RETURN

		END
		
	END 
	ELSE
	BEGIN
		IF SCHEMA_ID(@i_SchemaName) Is Null
		BEGIN
			SET @Msg = 'Schema named' + ' ' + @dq + @i_SchemaName + @dq + ' ' + 'does not exist'
			RAISERROR(@Msg, 16, 1, 1)
			RETURN

		END
		ELSE
		BEGIN
			SET @Msg = 	@i_ObjectType + ' ' + @dq + @i_SchemaName + @dq + ' ' + 'found.'
			RAISERROR(@Msg, 10, 1, 1)
			RETURN
		END
	END

		
	IF NOT EXISTS	(
					SELECT * 
					FROM sys.all_objects o 
					WHERE o.type_desc = @i_ObjectType 
					And o.schema_id = SCHEMA_ID(@i_SchemaName) 
					And o.name = @i_ObjectName
					)
	BEGIN
		--see if object exists in different schema
		IF EXISTS	(
					SELECT * 
					FROM sys.all_objects o 
					WHERE o.type_desc = @i_ObjectType 
					And o.schema_id <> SCHEMA_ID(@i_SchemaName)
					And o.name = @i_ObjectName
					)
		BEGIN
			SET @Msg = 	'Object' + ' ' + @dq + @i_ObjectName + @dq + ' ' + 'in different schema/s from the one specified in "@i_SchemaName"'
			RAISERROR(@Msg, 16, 1, 1)
		END
		ELSE
		BEGIN
			SET @Msg = 	'Object' + ' ' + @dq + @i_ObjectName + @dq + ' ' + 'not found in sys.all_objects.'
			RAISERROR(@Msg, 16, 1, 1)
		END
	END
	ELSE
	BEGIN
		SET @Msg = 	@i_ObjectType + ' ' + @dq + @i_ObjectName + @dq + ' ' + 'found.'
		RAISERROR(@Msg, 10, 1, 1)
			
	END


END

GO

/*
IF Not EXISTS (SELECT Null FROM sys.synonyms s WHERE s.name = 'spObjectExists')
CREATE SYNONYM spObjectExists FOR [{Your Schema Name}].[spObjectExists]
*/
